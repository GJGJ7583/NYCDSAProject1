while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
play_dice <- function(){
x <- sum(sample(1:6, 2, replace=T))
cat("x", x, "\n")
if(x == 7 | x == 11){
return ("win")
}
if (x == 2 | x == 3 | x == 12){
return ("loss")
}
if(x == 4 | x == 5 | x == 6 | x == 8 | x == 9 | x == 10){
cat("Hello, until win or loss \n")
cat("You win if dice roll", x, "\n")
while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
play_dice <- function(){
x <- sum(sample(1:6, 2, replace=T))
cat("x", x, "\n")
if(x == 7 | x == 11){
return ("win")
}
if (x == 2 | x == 3 | x == 12){
return ("loss")
}
if(x == 4 | x == 5 | x == 6 | x == 8 | x == 9 | x == 10){
cat("Hello, until win or loss \n")
cat("You win if dice roll", x, "\n")
while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
play_dice <- function(){
x <- sum(sample(1:6, 2, replace=T))
cat("x", x, "\n")
if(x == 7 | x == 11){
return ("win")
}
if (x == 2 | x == 3 | x == 12){
return ("loss")
}
if(x == 4 | x == 5 | x == 6 | x == 8 | x == 9 | x == 10){
cat("Hello, until win or loss \n")
cat("You win if dice roll", x, "\n")
while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
play_dice <- function(){
x <- sum(sample(1:6, 2, replace=T))
cat("x", x, "\n")
if(x == 7 | x == 11){
return ("win")
}
if (x == 2 | x == 3 | x == 12){
return ("loss")
}
if(x == 4 | x == 5 | x == 6 | x == 8 | x == 9 | x == 10){
cat("Hello, until win or loss \n")
cat("You win if dice roll", x, "\n")
while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
play_dice <- function(){
x <- sum(sample(1:6, 2, replace=T))
cat("x", x, "\n")
if(x == 7 | x == 11){
return ("win")
}
if (x == 2 | x == 3 | x == 12){
return ("loss")
}
if(x == 4 | x == 5 | x == 6 | x == 8 | x == 9 | x == 10){
cat("Hello, until win or loss \n")
cat("You win if dice roll", x, "\n")
while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
play_dice <- function(){
x <- sum(sample(1:6, 2, replace=T))
cat("x", x, "\n")
if(x == 7 | x == 11){
return ("win")
}
if (x == 2 | x == 3 | x == 12){
return ("loss")
}
if(x == 4 | x == 5 | x == 6 | x == 8 | x == 9 | x == 10){
cat("Hello, until win or loss \n")
cat("You win if dice roll", x, "\n")
while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
play_dice <- function(){
x <- sum(sample(1:6, 2, replace=T))
cat("x", x, "\n")
if(x == 7 | x == 11){
return ("win")
}
if (x == 2 | x == 3 | x == 12){
return ("loss")
}
if(x == 4 | x == 5 | x == 6 | x == 8 | x == 9 | x == 10){
cat("Hello, until win or loss \n")
cat("You win if dice roll", x, "\n")
while(TRUE){
y <- sum(sample(1:6, 2, replace=T))
cat("dice roll", y, "\n")
if(y == x){
return ("win")
}
if(y == 7){
return ("loss")
}
}
}
}
play_dice()
mpg
library(dplyr)
mpg
library(ggplot2)
mpg
library(ggplot2)
data(mpg)
head(mpg, 10)
head(mpg, 10)
library(ggplot2)
data(mpg)
head(mpg, 10)
library(ggplot2)
data(mpg)
head(mpg, 10)
library(ggplot2)
data(mpg)
head(mpg, 10)
names(mpg)
names(mpg)
mpg_subset <- select(mpg, V1 = year, V2 = cyl, V3 = cty, V4 = hwy)
library(dplyr)
mpg_subset <- select(mpg, V1 = year, V2 = cyl, V3 = cty, V4 = hwy)
head(mpg_subset, 10)
str(mpg_subset)
df %>% summarize(., n_distinct(value))
# filter and select. filter for rows. select for columns
df <- data.frame(color = c("blue", "black", "blue", "blue", "black"), value = 1:5)
df %>% summarize(., n_distinct(color))
library(ggplot2)
library(dplyr)
data(mpg)
names(mpg)
mpg_subset <- select(mpg, V1 = year, V2 = cyl, V3 = cty, V4 = hwy)
head(mpg_subset, 10)
str(mpg_subset)
select(mpg, year, cyl, cty. hwy)
select(mpg, year, cyl, cty, hwy)
head(mpg_subset, 10)
select(mpg, year, cyl, cty, hwy)
head(mpg_subset, 10)
mpg_subset %>% group_by(., V2) %>% summarise(., avg_cty = mean(V3), avg_hwy = mean(V4))
mpg %>% filter(., cyl == 4) %>% summarise(., avg = mean(cty))
mpg %>% filter(., cyl == 4) %>% summarise(., avg_cty = mean(cty), avg_hwy = mean(hwy))
mpg_subset %>% group_by(., V2) %>% summarise(., avg_cty = mean(V3), avg_hwy = mean(V4))
names(mpg)
library(ggplot2)
head(mpg)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid(. ~ cyl)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid(drv ~ .)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid(drv ~ cyl)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid(. ~ class)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid( ~ class)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid(. ~ class)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid( ~ class)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid(. ~ class)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color = class)) + facet_grid( ~ class)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + geom_smooth()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_smooth(se = FALSE)
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + geom_smooth(se = FALSE)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
# Question 1
# Central Tendency
# Mean and Median for Body.Temp
mean_body_temp = mean(temp$Body.Temp)
mean_body_temp
median_body_temp = median(temp$Body.Temp)
median_body_temp
# Mean and Median for Heart.Rate
mean_heart_rate = mean(temp$Heart.Rate)
mean_heart_rate
median_heart_rate = median(temp$Heart.Rate)
median_heart_rate
# Variability
# Variance and SD for Body.Temp
variance_body_temp = var(temp$Body.Temp)
variance_body_temp
sd_body_temp = sd(temp$Body.Temp)
sd_body_temp
# Variance and SD for Heart.Rate
variance_heart_rate = var(temp$Heart.Rate)
variance_heart_rate
sd_heart_rate = sd(temp$Heart.Rate)
sd_heart_rate
# Covariance and Correlation
cov_body_temp_heart_rate = cov(temp$Body.Temp, temp$Heart.Rate)
cov_body_temp_heart_rate
corr_body_temp_heart_rate = cor(temp$Body.Temp, temp$Heart.Rate)
corr_body_temp_heart_rate
# Question 2
hist(temp$Body.Temp)
plot(density(temp$Body.Temp), main = "Sample Body Temperature Distribution")
abline(v = 98.24923, lwd = 2, lty = 1, col = "blue")
abline(v = 98.3, lwd = 2, lty = 1, col = "red")
legend("topright", c("Sample Mean = 98.24923", "Sample Median, = 98.3"), lwd = 2, lty = 1, col = c("blue", "red"))
boxplot(temp$Body.Temp, main = "Sample Body Temperature Distribution")
abline(h = 98.24923, lwd = 2, lty = 1, col = "blue")
abline(h = 98.3, lwd = 2, lty = 1, col = "red")
legend("topright", c("Sample Mean = 98.24923", "Sample Median, = 98.3"), lwd = 2, lty = 1, col = c("blue", "red"))
hist(temp$Heart.Rate)
plot(density(temp$Heart.Rate), main = "Sample Heart Rate Distribution")
abline(v = 73.76154, lwd = 2, lty = 1, col = "blue")
abline(v = 74, lwd = 2, lty = 1, col = "red")
legend("topright", c("Sample Mean = 73.76154", "Sample Median, = 74"), lwd = 2, lty = 1, col = c("blue", "red"))
boxplot(temp$Heart.Rate, main = "Sample Heart Rate Distribution")
abline(h = 73.76154, lwd = 2, lty = 1, col = "blue")
abline(h = 74, lwd = 2, lty = 1, col = "red")
legend("topright", c("Sample Mean = 73.76154", "Sample Median, = 74"), lwd = 2, lty = 1, col = c("blue", "red"))
plot(temp$Body.Temp, temp$Heart.Rate, main = "Corralation Between Body Temperature and Heart Rate")
abline(lm(temp$Heart.Rate~temp$Body.Temp), col = "red")
# Question 3 You have heard that the average human body temperature is 98.6 degrees Fahrenheit. Does this data support this claim? (Perform a hypothesis test to determine whether the true population mean body temperature is 98.6 degrees Fahrenheit.)
#+ What is a 95% confidence interval for the average human body temperature?
#+ Interpret your results in context of the problem.
t.test(temp$Body.Temp, mu = 98.6, alternative = "less", conf.level = 0.95)
t.test(temp$Body.Temp, mu = 98.6, alternative = "less", conf.level = 0.95)
t.test(temp$Body.Temp, mu = 98.6, alternative = "greater", conf.level = 0.95)
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided", conf.level = 0.95)
plot(density(temp$Body.Temp), main = "Sample Body Temperature Distribution")
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided", conf.level = 0.95)
temp$Body.Temp
temp$Gender
t.test(temp$Body.Temp[temp$Gender == "Male"],
temp$Body.Temp[temp$Gender == "Female"],
alternative = "two.sided", conf.level = 0.95)
var.test(temp$Heart.Rate[temp$Gender == "Male"],
temp$Heart.Rate[temp$Gender == "Female"],
alternative = "two.sided", conf.level = 0.95)
var(temp$Heart.Rate[temp$Gender == "Male"])
var(temp$Heart.Rate[temp$Gender == "Female"])
var.test(temp$Heart.Rate[temp$Gender == "Male"],
temp$Heart.Rate[temp$Gender == "Female"],
alternative = "two.sided", conf.level = 0.95)
var(temp$Heart.Rate[temp$Gender == "Male"])
var(temp$Heart.Rate[temp$Gender == "Female"])
data(HairEyeColor)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
data_plants <- PlantGrowth
data_plants
data_plants <- PlantGrowth
data_plants
boxplot(data_plants$weight ~ data_plants$group,
col = c("red", "orange", "green"),
main = "Distribution of plant weights by types of treatment")
# Question 2
bartlett.test(weight~group, data_plants)
data_plants
var(data_plants$weight[data_plants$weight == ctrl])
var(data_plants$weight[data_plants$weight == "ctrl"])
var(data_plants$weight[data_plants$group == "ctrl"])
var(data_plants$weight[data_plants$group == ctrl])
"
data_plants
data_plants
data_plants
var(data_plants$weight[data_plants$group == "ctrl"])
data_plants <- PlantGrowth
data_plants
bartlett.test(weight~group, data_plants)
var(data_plants$weight[data_plants$group == "ctrl"])
var(data_plants$weight[data_plants$group == "trt1"])
var(data_plants$weight[data_plants$group == "trt2"])
data_plants
# Question 2
bartlett.test(weight~group, data_plants)
var(data_plants$weight[data_plants$group == "ctrl"])
var(data_plants$weight[data_plants$group == "trt1"])
var(data_plants$weight[data_plants$group == "trt2"])
bartlett.test(weight~group, data_plants)
var(data_plants$weight[data_plants$group == "ctrl"])
var(data_plants$weight[data_plants$group == "trt1"])
var(data_plants$weight[data_plants$group == "trt2"])
var.test(data_plants$weight[data_plants$group == "ctrl"],
data_plants$weight[data_plants$group == "trt1"],
alternative = "two.sided", conf.level = 0.95)
var.test(data_plants$weight[data_plants$group == "ctrl"],
data_plants$weight[data_plants$group == "trt1"],
alternative = "two.sided", conf.level = 0.95)
var.test(data_plants$weight[data_plants$group == "ctrl"],
data_plants$weight[data_plants$group == "trt2"],
alternative = "two.sided", conf.level = 0.95)
var.test(data_plants$weight[data_plants$group == "trt2"],
data_plants$weight[data_plants$group == "trt1"],
alternative = "two.sided", conf.level = 0.95)
var.test(data_plants$weight[data_plants$group == "ctrl"],
data_plants$weight[data_plants$group == "trt1"],
alternative = "two.sided", conf.level = 0.95)
var.test(data_plants$weight[data_plants$group == "ctrl"],
data_plants$weight[data_plants$group == "trt2"],
alternative = "two.sided", conf.level = 0.95)
var.test(data_plants$weight[data_plants$group == "trt2"],
data_plants$weight[data_plants$group == "trt1"],
alternative = "two.sided", conf.level = 0.95)
bartlett.test(weight~group, data_plants)
var(data_plants$weight[data_plants$group == "ctrl"])
var(data_plants$weight[data_plants$group == "trt1"])
var(data_plants$weight[data_plants$group == "trt2"])
# Question 3
summary(aov(data_plants$weight ~ data_plants$group))
data_hair_eye <- HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
data_hair_eye
mosaicplot(HairEyeColor, shade = TRUE)
data_hair_eye_female <- HairEyeColor [Sex = "Female"]
data_hair_eye_female
data_hair_eye_female <- HairEyeColor [Sex = Female]
data_hair_eye_female <- HairEyeColor [Sex == "Female"]
data_hair_eye_female <- HairEyeColor [, , 1]
data_hair_eye_female
data_hair_eye_female <- HairEyeColor [, , 2]
data_hair_eye_female
data_hair_eye_female <- HairEyeColor [, , 2]
mosaicplot(data_hair_eye_female, shade = TRUE)
mosaicplot(data_hair_eye_female, shade = TRUE)
chisq.test(data_hair_eye_female)
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
quiz.data
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
quiz.data
chisq.test(quiz.data)
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
data_hair_eye_female <- HairEyeColor [, 1:2 , 2]
data_hair_eye_female
mosaicplot(data_hair_eye_female, shade = TRUE)
mosaicplot(data_hair_eye_female, shade = TRUE)
chisq.test(data_hair_eye_female)
chisq.test(data_hair_eye_female)
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
data_hair_eye_female
chisq.test(data_hair_eye_female)
mosaicplot(data_hair_eye_female, shade = TRUE)
mosaicplot(data_hair_eye_female, shade = TRUE)
data_hair_eye
mosaicplot(data_hair_eye_female, shade = TRUE)
mosaicplot(data_hair_eye_female, shade = TRUE)
install.packages("shiny")
shiny::runApp('C:/Users/19178/Desktop/NYCDSA/Course/Data Analysis with R/Introduction to Shiny/shiny1')
runApp('C:/Users/19178/Desktop/NYCDSA/Course/Data Analysis with R/Introduction to Shiny/shiny1')
runApp('C:/Users/19178/Desktop/NYCDSA/Course/Data Analysis with R/Introduction to Shiny/shiny1')
setwd("C:/Users/19178/Desktop/NYCDSA/Course/G Goginashvili Project 1")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(markdown)
library(leaflet)
library(sp)
library(rgdal)
library(sp)
library(rgdal)
library(sf)
# Read three files:
#         1. Reduced assessment values for each property (BBL)
#         2. Petitions for each property (BBL)
#         1. Assessment values for each property (BBL)
assessment_2018 <- read.csv("Assessment_Actions_2018.csv")
property_values_2018 <-
read.csv("Property_Valuation_and_Assessment_Data_2018.csv")
# Join two data frames (Reduced assessment values for each property,
# Assessment values for each property) to extract
# assessment values from property_values_2918
total_reduction_city <-
left_join(
assessment_2018,
property_values_2018,
by = c(
"Borough.Code" = "BORO" ,
"Block.Number" = "BLOCK",
"Lot.Number" = "LOT"
)
)
# Get rid of duplicate rows by boro, block, lot
dist <-
total_reduction_city %>% distinct(Borough.Code, Block.Number, Lot.Number, .keep_all = TRUE)
# Select desired columns (drop repeating columns)
reduction_final_2018 <-
dist %>% select(., 1, 2, 3, 4, 5, 6, 7, 8, 10)
head(reduction_final_2018)
# Drop NA, choose only classes 2 and 4,
# create two columns (tax_saved and percent_red),
# filter reduction in AV less than 100% (percent_red < 1)
reduction_final_2018_clean <-
reduction_final_2018 %>% drop_na(Borough.Code,
Block.Number,
Lot.Number,
Granted.Reduction.Amount,
FULLVAL)
reduction_final_2018_clean <-
reduction_final_2018_clean %>% filter(., Tax.Class.Code %in% c("2", "4"))
reduction_final_2018_clean <-
reduction_final_2018_clean %>% mutate(
.,
tax_saved = ifelse(
Tax.Class.Code == "2",
Granted.Reduction.Amount *
0.12612,
Granted.Reduction.Amount *
0.10514
),
percent_red = Granted.Reduction.Amount / FULLVAL,
boroughs = ifelse(
Borough.Code == 1,
"Manhattan",
ifelse(
Borough.Code == 2,
"Bronx",
ifelse(
Borough.Code == 3,
"Brooklyn",
ifelse(Borough.Code == 4,
"Queens", "Staten Island")
)
)
)
)
reduction_final_2018_clean <-
reduction_final_2018_clean %>% filter(., percent_red < 1)
write.csv(reduction_final_2018_clean,
"data_final_2018.csv",
row.names = FALSE)
assessment_2018 <- read.csv("data_final_2018.csv")
shiny::runApp()
